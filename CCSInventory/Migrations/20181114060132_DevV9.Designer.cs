// <auto-generated />
using System;
using CCSInventory.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CCSInventory.Migrations
{
    [DbContext(typeof(CCSDbContext))]
    [Migration("20181114060132_DevV9")]
    partial class DevV9
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("CCSInventory.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressNote");

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("StreetAddress1")
                        .IsRequired();

                    b.Property<string>("StreetAddress2");

                    b.Property<string>("Zip")
                        .IsRequired();

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new { AddressID = 1, AddressNote = "Catholic Community Services Ogden", City = "Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), State = "UT", StreetAddress1 = "2504 F Ave", Zip = "84401" },
                        new { AddressID = 2, AddressNote = "Walmart", City = "Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), State = "UT", StreetAddress1 = "123 Memory Lane", Zip = "84401" },
                        new { AddressID = 3, AddressNote = "Smiths", City = "Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), State = "UT", StreetAddress1 = "543 n 250 e ", Zip = "84401" },
                        new { AddressID = 4, AddressNote = "Mark", City = "Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), State = "UT", StreetAddress1 = "635 s 400 w", Zip = "84401" },
                        new { AddressID = 5, AddressNote = "Kelly Vasquez", City = "Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), State = "UT", StreetAddress1 = "4567 washington blvd", Zip = "84401" }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Agency", b =>
                {
                    b.Property<int>("AgencyID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressID");

                    b.Property<string>("AgencyName")
                        .IsRequired();

                    b.Property<string>("AgencyNote");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsArchived");

                    b.Property<int?>("MailingAddressID");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("AgencyID");

                    b.HasAlternateKey("AgencyName");

                    b.HasIndex("AddressID");

                    b.HasIndex("MailingAddressID");

                    b.ToTable("Agencies");

                    b.HasData(
                        new { AgencyID = 1, AddressID = 1, AgencyName = "Catholic Community Services Ogden", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsArchived = false, MailingAddressID = 1, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PhoneNumber = "+18013945944" },
                        new { AgencyID = 2, AddressID = 2, AgencyName = "Walmart", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsArchived = false, MailingAddressID = 2, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PhoneNumber = "+18013551243" },
                        new { AgencyID = 3, AddressID = 3, AgencyName = "Smiths", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsArchived = false, MailingAddressID = 3, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PhoneNumber = "+18017231598" },
                        new { AgencyID = 4, AddressID = 4, AgencyName = "Mark", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsArchived = false, MailingAddressID = 4, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PhoneNumber = "+18013665201" },
                        new { AgencyID = 5, AddressID = 5, AgencyName = "Kelly Vasquez", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsArchived = false, MailingAddressID = 5, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PhoneNumber = "+180139918034" }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.Property<string>("CategoryNote");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("CategoryID");

                    b.HasAlternateKey("CategoryName");

                    b.ToTable("Categories");

                    b.HasData(
                        new { CategoryID = 1, CategoryName = "Dry Goods", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc) },
                        new { CategoryID = 2, CategoryName = "Perishable", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc) },
                        new { CategoryID = 3, CategoryName = "Non-Food", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc) },
                        new { CategoryID = 4, CategoryName = "USDA", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc) },
                        new { CategoryID = 5, CategoryName = "Grocery Rescue", CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc) }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Container", b =>
                {
                    b.Property<int>("ContainerID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BinNumber");

                    b.Property<int>("Cases");

                    b.Property<string>("ContainerNote");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<bool>("IsArchived");

                    b.Property<bool>("IsUSDA");

                    b.Property<string>("Location");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubcategoryID");

                    b.Property<decimal>("Weight");

                    b.HasKey("ContainerID");

                    b.HasIndex("BinNumber");

                    b.HasIndex("SubcategoryID");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("CCSInventory.Models.PantryPackTransaction", b =>
                {
                    b.Property<int>("PantryPackTransactionID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PantryPackTransactionNote");

                    b.Property<int>("PantryPackTypeID");

                    b.Property<int>("Qty");

                    b.HasKey("PantryPackTransactionID");

                    b.HasIndex("PantryPackTypeID");

                    b.ToTable("PantryPackTransactions");
                });

            modelBuilder.Entity("CCSInventory.Models.PantryPackType", b =>
                {
                    b.Property<int>("PantryPackTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PantryPackTypeName")
                        .IsRequired();

                    b.Property<string>("PantryPackTypeNote");

                    b.HasKey("PantryPackTypeID");

                    b.HasAlternateKey("PantryPackTypeName");

                    b.HasIndex("PantryPackTypeName");

                    b.ToTable("PantryPackType");

                    b.HasData(
                        new { PantryPackTypeID = 1, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PantryPackTypeName = "Generic" }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Subcategory", b =>
                {
                    b.Property<int>("SubcategoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("SubcategoryName")
                        .IsRequired();

                    b.Property<string>("SubcategoryNote");

                    b.HasKey("SubcategoryID");

                    b.HasAlternateKey("SubcategoryName");

                    b.HasIndex("CategoryID");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new { SubcategoryID = 1, CategoryID = 1, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Unsorted (Dry Goods)" },
                        new { SubcategoryID = 2, CategoryID = 2, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Unsorted (Perishable)" },
                        new { SubcategoryID = 3, CategoryID = 3, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Unsorted (Non-Food)" },
                        new { SubcategoryID = 4, CategoryID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Unsorted (USDA)" },
                        new { SubcategoryID = 5, CategoryID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Beans" },
                        new { SubcategoryID = 6, CategoryID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Milk" },
                        new { SubcategoryID = 7, CategoryID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Rice" },
                        new { SubcategoryID = 8, CategoryID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Fruit" },
                        new { SubcategoryID = 9, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Bakery" },
                        new { SubcategoryID = 10, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Dairy" },
                        new { SubcategoryID = 11, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Produce" },
                        new { SubcategoryID = 12, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Deli" },
                        new { SubcategoryID = 13, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Meat" },
                        new { SubcategoryID = 14, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Frozen" },
                        new { SubcategoryID = 15, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Dry Grocery" },
                        new { SubcategoryID = 16, CategoryID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), SubcategoryName = "Non-Food" }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Template", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("TemplateData")
                        .IsRequired();

                    b.Property<string>("TemplateName")
                        .IsRequired();

                    b.Property<int>("TemplateType");

                    b.HasKey("TemplateID");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("CCSInventory.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AgencyID");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsOutgoing");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionTypeID");

                    b.HasKey("TransactionID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("TransactionTypeID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CCSInventory.Models.TransactionLineItem", b =>
                {
                    b.Property<int>("TransactionLineItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Cases");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("SubcategoryID");

                    b.Property<int>("TransactionID");

                    b.Property<string>("TransactionLineItemNote");

                    b.Property<string>("USDANumber");

                    b.Property<decimal>("Weight");

                    b.HasKey("TransactionLineItemID");

                    b.HasIndex("SubcategoryID");

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionLineItems");
                });

            modelBuilder.Entity("CCSInventory.Models.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsOutgoing");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("TransactionTypeName")
                        .IsRequired();

                    b.Property<string>("TransactionTypeNote");

                    b.HasKey("TransactionTypeID");

                    b.HasAlternateKey("TransactionTypeName");

                    b.HasIndex("TransactionTypeName");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new { TransactionTypeID = 1, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = false, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "In-Kind", TransactionTypeNote = "Donations with where the items have not been taxed." },
                        new { TransactionTypeID = 2, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = false, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "Taxed", TransactionTypeNote = "Donations with where the items have been taxed." },
                        new { TransactionTypeID = 3, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = false, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "USDA", TransactionTypeNote = "Donations by the Utah Food Bank." },
                        new { TransactionTypeID = 4, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = false, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "Grocery Rescue", TransactionTypeNote = "Donations from Grocery Rescue." },
                        new { TransactionTypeID = 5, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = true, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "Spoiled", TransactionTypeNote = "Outgoing food due to spoilage." },
                        new { TransactionTypeID = 6, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = true, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "On-The-Line", TransactionTypeNote = "Outgoing items to the pantry." },
                        new { TransactionTypeID = 7, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = true, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "Pantry Pack", TransactionTypeNote = "Outgoing items for pantry packs." },
                        new { TransactionTypeID = 8, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), IsOutgoing = true, ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), TransactionTypeName = "Organization Transfer", TransactionTypeNote = "Outgoing items to other organizations." }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserNote");

                    b.Property<int>("UserRole");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.HasAlternateKey("Username");

                    b.HasIndex("Username");

                    b.ToTable("Users");

                    b.HasData(
                        new { UserID = 1, CreatedBy = "Seeded Data", CreatedDate = new DateTime(2018, 10, 18, 12, 30, 18, 51, DateTimeKind.Utc), FirstName = "Weber", LastName = "CS", ModifiedBy = "Seeded Data", ModifiedDate = new DateTime(2018, 11, 14, 3, 40, 0, 0, DateTimeKind.Utc), PasswordHash = "$2a$10$/n.xV7jA5piJOZmfbT270eAKstycJ9WHqfpSttqz25ARWwnyLCyhu", UserNote = "Default user for an empty database", UserRole = 3, Username = "skram" }
                    );
                });

            modelBuilder.Entity("CCSInventory.Models.Agency", b =>
                {
                    b.HasOne("CCSInventory.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("CCSInventory.Models.Address", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressID");
                });

            modelBuilder.Entity("CCSInventory.Models.Container", b =>
                {
                    b.HasOne("CCSInventory.Models.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CCSInventory.Models.PantryPackTransaction", b =>
                {
                    b.HasOne("CCSInventory.Models.PantryPackType", "PantryPackType")
                        .WithMany()
                        .HasForeignKey("PantryPackTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CCSInventory.Models.Subcategory", b =>
                {
                    b.HasOne("CCSInventory.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CCSInventory.Models.Transaction", b =>
                {
                    b.HasOne("CCSInventory.Models.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CCSInventory.Models.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CCSInventory.Models.TransactionLineItem", b =>
                {
                    b.HasOne("CCSInventory.Models.Subcategory", "Subcategory")
                        .WithMany()
                        .HasForeignKey("SubcategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CCSInventory.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
